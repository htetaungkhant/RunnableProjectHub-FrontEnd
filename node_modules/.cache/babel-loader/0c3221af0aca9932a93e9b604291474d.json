{"ast":null,"code":"var _jsxFileName = \"/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx\";\nimport React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport { TextArea, Checkbox, Button, Form, Select, Input } from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.projectTypeOnChange = (event, data) => {\n      this.setState({\n        selectProjectType: data.value\n      });\n      console.log(data.value);\n    };\n\n    this.projectNameOnChange = (event, data) => {\n      this.setState({\n        selectProjectName: event.target.value\n      });\n      console.log(this.state.selectProjectName);\n    };\n\n    this.languageOnChange = (event, data) => {};\n\n    this.languageVersionOnChange = (event, data) => {};\n\n    this.projectFilesOnChange = (e, data) => {};\n\n    this.dbOnCheck = (e, data) => {};\n\n    this.dbOnChanage = (e, data) => {};\n\n    this.dbVersionOnChange = value => {\n      this.setState({\n        dbVersion: value\n      });\n    };\n\n    this.dbBackUpOnChange = value => {\n      this.setState({\n        dbBackUpFiles: value\n      });\n    };\n\n    this.descriptionOnChange = (e, data) => {\n      this.setState({\n        description: e.target.value\n      });\n    };\n\n    this.downloadPermissionOnChange = (e, data) => {\n      this.setState({\n        downloadPermission: true\n      });\n    };\n\n    this.onSubmit = (e, data) => {};\n\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      selectProjectType: \"\",\n      selecteProjectName: null,\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPremission: false\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/supportLanguage\").then(response => {\n      // handle success\n      const pj = response.data;\n      this.setState({\n        loading: false,\n        projects: pj,\n        projectTypes: pj.projects.map(project => {\n          return {\n            text: project.projectType,\n            value: project.projectType\n          };\n        }),\n        selectProjectType: \"Website\"\n      });\n      console.log(\"data fetched\", this.state.projectType);\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    });\n  }\n\n  render() {\n    const options = [{\n      text: \"Website\",\n      value: \"website\"\n    }, {\n      text: \"Window Application\",\n      value: \"window application\"\n    }, {\n      text: \"Android Application\",\n      value: \"android application\"\n    }];\n    let uploadform;\n\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = React.createElement(WebsiteUploadForm, {\n          projectDetail: this.state.projects,\n          languageOnChange: this.languageOnChange,\n          languageVersionOnChange: this.languageVersionOnChange,\n          projectFilesOnChange: this.projectFilesOnChange,\n          dbOnCheck: this.dbOnCheck,\n          dbOnChange: this.dbOnChanage,\n          dbVersionOnChange: this.dbVersionOnChange,\n          dbBackupOnChange: this.dbBackupOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        });\n        break;\n\n      case \"Window Application\":\n        uploadform = React.createElement(WindowUploadForm, {\n          projectDetail: this.state.projects,\n          languageOnChange: this.languageOnChange,\n          languageVersionOnChange: this.languageVersionOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        });\n        break;\n\n      case \"Android Application\":\n        uploadform = React.createElement(AndroidUploadForm, {\n          projectDetail: this.state.projects,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n        break;\n    }\n\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      fluid: true,\n      control: Select,\n      label: \"Project Type\",\n      options: this.state.projectTypes,\n      placeholder: \"Project Type\",\n      onChange: this.projectTypeOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      inline: true,\n      fluid: true,\n      control: Input,\n      label: \"Project Name\",\n      placeholder: \"Name\",\n      onChange: this.projectNameOnChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), uploadform, React.createElement(Form.Field, {\n      control: TextArea,\n      label: \"About\",\n      placeholder: \"Tell something about your project ...\",\n      onChange: this.descriptionOnChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      control: Checkbox,\n      label: \"allow download\",\n      onChange: this.downloadPermissionOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      onClick: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx"],"names":["React","Component","WebsiteUploadForm","WindowUploadForm","AndroidUploadForm","axios","TextArea","Checkbox","Button","Form","Select","Input","Upload","constructor","props","projectTypeOnChange","event","data","setState","selectProjectType","value","console","log","projectNameOnChange","selectProjectName","target","state","languageOnChange","languageVersionOnChange","projectFilesOnChange","e","dbOnCheck","dbOnChanage","dbVersionOnChange","dbVersion","dbBackUpOnChange","dbBackUpFiles","descriptionOnChange","description","downloadPermissionOnChange","downloadPermission","onSubmit","loading","projects","projectTypes","selecteProjectName","selectLanguage","selectLanguageVersion","projectFiles","dbLanguage","dbBackUpFile","downloadPremission","componentDidMount","get","then","response","pj","map","project","text","projectType","catch","error","render","options","uploadform","dbBackupOnChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EAEEC,QAFF,EAGEC,MAHF,EAIEC,IAJF,EAKEC,MALF,EAMEC,KANF,QAOO,mBAPP;;AASA,MAAMC,MAAN,SAAqBX,SAArB,CAA+B;AAC7BY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA0CnBC,mBA1CmB,GA0CG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACrC,WAAKC,QAAL,CAAc;AAAEC,QAAAA,iBAAiB,EAAEF,IAAI,CAACG;AAA1B,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACG,KAAjB;AACD,KA7CkB;;AAAA,SA+CnBG,mBA/CmB,GA+CG,CAACP,KAAD,EAAQC,IAAR,KAAiB;AACrC,WAAKC,QAAL,CAAc;AAAEM,QAAAA,iBAAiB,EAAER,KAAK,CAACS,MAAN,CAAaL;AAAlC,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAL,CAAWF,iBAAvB;AACD,KAlDkB;;AAAA,SAoDnBG,gBApDmB,GAoDA,CAACX,KAAD,EAAQC,IAAR,KAAiB,CAAE,CApDnB;;AAAA,SAsDnBW,uBAtDmB,GAsDO,CAACZ,KAAD,EAAQC,IAAR,KAAiB,CAAE,CAtD1B;;AAAA,SAwDnBY,oBAxDmB,GAwDI,CAACC,CAAD,EAAIb,IAAJ,KAAa,CAAE,CAxDnB;;AAAA,SA0DnBc,SA1DmB,GA0DP,CAACD,CAAD,EAAIb,IAAJ,KAAa,CAAE,CA1DR;;AAAA,SA4DnBe,WA5DmB,GA4DL,CAACF,CAAD,EAAIb,IAAJ,KAAa,CAAE,CA5DV;;AAAA,SA8DnBgB,iBA9DmB,GA8DCb,KAAK,IAAI;AAC3B,WAAKF,QAAL,CAAc;AAAEgB,QAAAA,SAAS,EAAEd;AAAb,OAAd;AACD,KAhEkB;;AAAA,SAkEnBe,gBAlEmB,GAkEAf,KAAK,IAAI;AAC1B,WAAKF,QAAL,CAAc;AAAEkB,QAAAA,aAAa,EAAEhB;AAAjB,OAAd;AACD,KApEkB;;AAAA,SAsEnBiB,mBAtEmB,GAsEG,CAACP,CAAD,EAAIb,IAAJ,KAAa;AACjC,WAAKC,QAAL,CAAc;AAAEoB,QAAAA,WAAW,EAAER,CAAC,CAACL,MAAF,CAASL;AAAxB,OAAd;AACD,KAxEkB;;AAAA,SA0EnBmB,0BA1EmB,GA0EU,CAACT,CAAD,EAAIb,IAAJ,KAAa;AACxC,WAAKC,QAAL,CAAc;AAAEsB,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACD,KA5EkB;;AAAA,SA8EnBC,QA9EmB,GA8ER,CAACX,CAAD,EAAIb,IAAJ,KAAa,CAAE,CA9EP;;AAEjB,SAAKS,KAAL,GAAa;AACXgB,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,QAAQ,EAAE,IAFC;AAGXC,MAAAA,YAAY,EAAE,IAHH;AAIXzB,MAAAA,iBAAiB,EAAE,EAJR;AAKX0B,MAAAA,kBAAkB,EAAE,IALT;AAMXC,MAAAA,cAAc,EAAE,IANL;AAOXC,MAAAA,qBAAqB,EAAE,IAPZ;AAQXC,MAAAA,YAAY,EAAE,IARH;AASXjB,MAAAA,SAAS,EAAE,KATA;AAUXkB,MAAAA,UAAU,EAAE,IAVD;AAWXf,MAAAA,SAAS,EAAE,IAXA;AAYXgB,MAAAA,YAAY,EAAE,IAZH;AAaXZ,MAAAA,WAAW,EAAE,IAbF;AAcXa,MAAAA,kBAAkB,EAAE;AAdT,KAAb;AAgBD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB/C,IAAAA,KAAK,CACFgD,GADH,CACO,uCADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB;AACA,YAAMC,EAAE,GAAGD,QAAQ,CAACtC,IAApB;AACA,WAAKC,QAAL,CAAc;AACZwB,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,QAAQ,EAAEa,EAFE;AAGZZ,QAAAA,YAAY,EAAEY,EAAE,CAACb,QAAH,CAAYc,GAAZ,CAAgBC,OAAO,IAAI;AACvC,iBAAO;AAAEC,YAAAA,IAAI,EAAED,OAAO,CAACE,WAAhB;AAA6BxC,YAAAA,KAAK,EAAEsC,OAAO,CAACE;AAA5C,WAAP;AACD,SAFa,CAHF;AAMZzC,QAAAA,iBAAiB,EAAE;AANP,OAAd;AAQAE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKI,KAAL,CAAWkC,WAAvC;AACD,KAdH,EAeGC,KAfH,CAeS,UAASC,KAAT,EAAgB;AACrB;AACAzC,MAAAA,OAAO,CAACC,GAAR,CAAYwC,KAAZ;AACD,KAlBH;AAmBD;;AAwCDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,CACd;AAAEL,MAAAA,IAAI,EAAE,SAAR;AAAmBvC,MAAAA,KAAK,EAAE;AAA1B,KADc,EAEd;AAAEuC,MAAAA,IAAI,EAAE,oBAAR;AAA8BvC,MAAAA,KAAK,EAAE;AAArC,KAFc,EAGd;AAAEuC,MAAAA,IAAI,EAAE,qBAAR;AAA+BvC,MAAAA,KAAK,EAAE;AAAtC,KAHc,CAAhB;AAKA,QAAI6C,UAAJ;;AACA,YAAQ,KAAKvC,KAAL,CAAWP,iBAAnB;AACE,WAAK,SAAL;AACE8C,QAAAA,UAAU,GACR,oBAAC,iBAAD;AACE,UAAA,aAAa,EAAE,KAAKvC,KAAL,CAAWiB,QAD5B;AAEE,UAAA,gBAAgB,EAAE,KAAKhB,gBAFzB;AAGE,UAAA,uBAAuB,EAAE,KAAKC,uBAHhC;AAIE,UAAA,oBAAoB,EAAE,KAAKC,oBAJ7B;AAKE,UAAA,SAAS,EAAE,KAAKE,SALlB;AAME,UAAA,UAAU,EAAE,KAAKC,WANnB;AAOE,UAAA,iBAAiB,EAAE,KAAKC,iBAP1B;AAQE,UAAA,gBAAgB,EAAE,KAAKiC,gBARzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYA;;AACF,WAAK,oBAAL;AACED,QAAAA,UAAU,GACR,oBAAC,gBAAD;AACE,UAAA,aAAa,EAAE,KAAKvC,KAAL,CAAWiB,QAD5B;AAEE,UAAA,gBAAgB,EAAE,KAAKhB,gBAFzB;AAGE,UAAA,uBAAuB,EAAE,KAAKC,uBAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOA;;AACF,WAAK,qBAAL;AACEqC,QAAAA,UAAU,GAAG,oBAAC,iBAAD;AAAmB,UAAA,aAAa,EAAE,KAAKvC,KAAL,CAAWiB,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAb;AACA;AA1BJ;;AA6BA,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,KAAK,MADP;AAEE,MAAA,OAAO,EAAEjC,MAFX;AAGE,MAAA,KAAK,EAAC,cAHR;AAIE,MAAA,OAAO,EAAE,KAAKgB,KAAL,CAAWkB,YAJtB;AAKE,MAAA,WAAW,EAAC,cALd;AAME,MAAA,QAAQ,EAAE,KAAK7B,mBANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASE,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,MAAM,MADR;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,OAAO,EAAEJ,KAHX;AAIE,MAAA,KAAK,EAAC,cAJR;AAKE,MAAA,WAAW,EAAC,MALd;AAME,MAAA,QAAQ,EAAE,KAAKY,mBANjB;AAOE,MAAA,QAAQ,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAkBG0C,UAlBH,EAmBE,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,OAAO,EAAE3D,QADX;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,WAAW,EAAC,uCAHd;AAIE,MAAA,QAAQ,EAAE,KAAK+B,mBAJjB;AAKE,MAAA,QAAQ,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EA0BE,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,OAAO,EAAE9B,QADX;AAEE,MAAA,KAAK,EAAC,gBAFR;AAGE,MAAA,QAAQ,EAAE,KAAKgC,0BAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BF,EA+BE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/BF,CADF;AAqCD;;AA1J4B;;AA6J/B,eAAe7B,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport {\n  TextArea,\n  Checkbox,\n  Button,\n  Form,\n  Select,\n  Input\n} from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      selectProjectType: \"\",\n      selecteProjectName: null,\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPremission: false\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:8080/supportLanguage\")\n      .then(response => {\n        // handle success\n        const pj = response.data;\n        this.setState({\n          loading: false,\n          projects: pj,\n          projectTypes: pj.projects.map(project => {\n            return { text: project.projectType, value: project.projectType };\n          }),\n          selectProjectType: \"Website\"\n        });\n        console.log(\"data fetched\", this.state.projectType);\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      });\n  }\n\n  projectTypeOnChange = (event, data) => {\n    this.setState({ selectProjectType: data.value });\n    console.log(data.value);\n  };\n\n  projectNameOnChange = (event, data) => {\n    this.setState({ selectProjectName: event.target.value });\n    console.log(this.state.selectProjectName);\n  };\n\n  languageOnChange = (event, data) => {};\n\n  languageVersionOnChange = (event, data) => {};\n\n  projectFilesOnChange = (e, data) => {};\n\n  dbOnCheck = (e, data) => {};\n\n  dbOnChanage = (e, data) => {};\n\n  dbVersionOnChange = value => {\n    this.setState({ dbVersion: value });\n  };\n\n  dbBackUpOnChange = value => {\n    this.setState({ dbBackUpFiles: value });\n  };\n\n  descriptionOnChange = (e, data) => {\n    this.setState({ description: e.target.value });\n  };\n\n  downloadPermissionOnChange = (e, data) => {\n    this.setState({ downloadPermission: true });\n  };\n\n  onSubmit = (e, data) => {};\n\n  render() {\n    const options = [\n      { text: \"Website\", value: \"website\" },\n      { text: \"Window Application\", value: \"window application\" },\n      { text: \"Android Application\", value: \"android application\" }\n    ];\n    let uploadform;\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = (\n          <WebsiteUploadForm\n            projectDetail={this.state.projects}\n            languageOnChange={this.languageOnChange}\n            languageVersionOnChange={this.languageVersionOnChange}\n            projectFilesOnChange={this.projectFilesOnChange}\n            dbOnCheck={this.dbOnCheck}\n            dbOnChange={this.dbOnChanage}\n            dbVersionOnChange={this.dbVersionOnChange}\n            dbBackupOnChange={this.dbBackupOnChange}\n          />\n        );\n        break;\n      case \"Window Application\":\n        uploadform = (\n          <WindowUploadForm\n            projectDetail={this.state.projects}\n            languageOnChange={this.languageOnChange}\n            languageVersionOnChange={this.languageVersionOnChange}\n          />\n        );\n        break;\n      case \"Android Application\":\n        uploadform = <AndroidUploadForm projectDetail={this.state.projects} />;\n        break;\n    }\n\n    return (\n      <Form>\n        <Form.Field\n          fluid\n          control={Select}\n          label=\"Project Type\"\n          options={this.state.projectTypes}\n          placeholder=\"Project Type\"\n          onChange={this.projectTypeOnChange}\n        />\n        <Form.Field\n          inline\n          fluid\n          control={Input}\n          label=\"Project Name\"\n          placeholder=\"Name\"\n          onChange={this.projectNameOnChange}\n          required\n        />\n        {uploadform}\n        <Form.Field\n          control={TextArea}\n          label=\"About\"\n          placeholder=\"Tell something about your project ...\"\n          onChange={this.descriptionOnChange}\n          required\n        />\n        <Form.Field\n          control={Checkbox}\n          label=\"allow download\"\n          onChange={this.downloadPermissionOnChange}\n        />\n        <Button type=\"submit\" onClick={this.onSubmit}>\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}