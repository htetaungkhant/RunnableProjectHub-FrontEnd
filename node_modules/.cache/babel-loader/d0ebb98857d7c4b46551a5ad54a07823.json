{"ast":null,"code":"var _jsxFileName = \"/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx\";\nimport React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport { TextArea, Checkbox, Button, Form, Select, Input } from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.projectTypeOnChange = (event, data) => {\n      this.setState({\n        selectProjectType: data.value\n      });\n      console.log(data.value);\n    };\n\n    this.projectNameOnChange = (event, data) => {\n      console.log(event.target.value);\n    };\n\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      selectProjectType: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/supportLanguage\").then(response => {\n      // handle success\n      const pj = response.data;\n      this.setState({\n        loading: false,\n        projects: pj,\n        projectTypes: pj.projects.map(project => {\n          return {\n            text: project.projectType,\n            value: project.projectType\n          };\n        }),\n        selectProjectType: \"Website\",\n        selectProjectName: null\n      });\n      console.log(\"data fetched\", this.state.projectType);\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    });\n  }\n\n  render() {\n    const options = [{\n      text: \"Website\",\n      value: \"website\"\n    }, {\n      text: \"Window Application\",\n      value: \"window application\"\n    }, {\n      text: \"Android Application\",\n      value: \"android application\"\n    }];\n    let uploadform;\n\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = React.createElement(WebsiteUploadForm, {\n          projectDetail: this.state.projects,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n        break;\n\n      case \"Window Application\":\n        uploadform = React.createElement(WindowUploadForm, {\n          projectDetail: this.state.projects,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        });\n        break;\n\n      case \"Android Application\":\n        uploadform = React.createElement(AndroidUploadForm, {\n          projectDetail: this.state.projects,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n        break;\n    }\n\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      fluid: true,\n      control: Select,\n      label: \"Project Type\",\n      options: this.state.projectTypes,\n      placeholder: \"Project Type\",\n      onChange: this.projectTypeOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      inline: true,\n      fluid: true,\n      control: Input,\n      label: \"Project Name\",\n      placeholder: \"Name\",\n      onChange: this.projectNameOnChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), uploadform, React.createElement(Form.Field, {\n      control: TextArea,\n      label: \"About\",\n      placeholder: \"Tell something about your project ...\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      control: Checkbox,\n      label: \"allow download\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx"],"names":["React","Component","WebsiteUploadForm","WindowUploadForm","AndroidUploadForm","axios","TextArea","Checkbox","Button","Form","Select","Input","Upload","constructor","props","projectTypeOnChange","event","data","setState","selectProjectType","value","console","log","projectNameOnChange","target","state","loading","projects","projectTypes","componentDidMount","get","then","response","pj","map","project","text","projectType","selectProjectName","catch","error","render","options","uploadform"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport {\n  TextArea,\n  Checkbox,\n  Button,\n  Form,\n  Select,\n  Input\n} from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      selectProjectType: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:8080/supportLanguage\")\n      .then(response => {\n        // handle success\n        const pj = response.data;\n        this.setState({\n          loading: false,\n          projects: pj,\n          projectTypes: pj.projects.map(project => {\n            return { text: project.projectType, value: project.projectType };\n          }),\n          selectProjectType: \"Website\",\n          selectProjectName: null\n        });\n        console.log(\"data fetched\", this.state.projectType);\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      });\n  }\n\n  projectTypeOnChange = (event, data) => {\n    this.setState({ selectProjectType: data.value });\n    console.log(data.value);\n  };\n\n  projectNameOnChange = (event, data) => {\n    console.log(event.target.value);\n  };\n\n  render() {\n    const options = [\n      { text: \"Website\", value: \"website\" },\n      { text: \"Window Application\", value: \"window application\" },\n      { text: \"Android Application\", value: \"android application\" }\n    ];\n    let uploadform;\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = <WebsiteUploadForm projectDetail={this.state.projects} />;\n        break;\n      case \"Window Application\":\n        uploadform = <WindowUploadForm projectDetail={this.state.projects} />;\n        break;\n      case \"Android Application\":\n        uploadform = <AndroidUploadForm projectDetail={this.state.projects} />;\n        break;\n    }\n\n    return (\n      <Form>\n        <Form.Field\n          fluid\n          control={Select}\n          label=\"Project Type\"\n          options={this.state.projectTypes}\n          placeholder=\"Project Type\"\n          onChange={this.projectTypeOnChange}\n        />\n        <Form.Field\n          inline\n          fluid\n          control={Input}\n          label=\"Project Name\"\n          placeholder=\"Name\"\n          onChange={this.projectNameOnChange}\n          required\n        />\n        {uploadform}\n        <Form.Field\n          control={TextArea}\n          label=\"About\"\n          placeholder=\"Tell something about your project ...\"\n          required\n        />\n        <Form.Field control={Checkbox} label=\"allow download\" />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}