{"ast":null,"code":"var _jsxFileName = \"/home/htunlin/react/runnableprojecthub/src/component/WebsiteUploadForm.jsx\";\nimport React, { Component } from \"react\";\nimport { Checkbox, Form, Select } from \"semantic-ui-react\";\n\nclass WebsiteUploadForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.languageOnChange = (event, data) => {\n      this.props.languageOnChange(data.value);\n      this.setState({\n        selectedLanguage: data.value\n      });\n    };\n\n    this.languageVersionOnChange = (event, data) => {\n      this.props.languageVersionOnChange(data.value);\n    };\n\n    this.dbOnCheck = (e, data) => {\n      this.props.dbOnCheck(data.checked);\n      this.setState({\n        databaseChecked: data.checked\n      });\n      console.log(\"database :\", data.checked);\n    };\n\n    this.dbOnChange = (e, data) => {\n      this.props.dbOnChange(data.value);\n    };\n\n    this.dbVersionOnChange = (e, data) => {\n      this.props.dbVersionOnChange(data.value);\n    };\n\n    this.state = {\n      selectedLanguage: null,\n      databaseChecked: false\n    };\n  }\n\n  render() {\n    const detail = this.props.projectDetail; //extract website information\n\n    const webDetail = detail.projects.filter(project => {\n      return project.projectType === \"Website\";\n    }); //extract supported language version from webInfo\n\n    const version = webDetail[0].language.filter(language => {\n      return language.name === this.state.selectedLanguage;\n    });\n    let versionOption = null;\n\n    if (version.length > 0) {\n      versionOption = version[0].version.map(v => {\n        return {\n          text: v,\n          value: v\n        };\n      });\n    } //extract supported Language from webInfo (\n\n\n    const languageOption = webDetail[0].language.map(language => {\n      return {\n        text: language.name,\n        value: language.name\n      };\n    }); //extract supported Database from webInfo (staic) need to dynamic for multi-db\n\n    const databaseOption = detail.database.map(db => {\n      return {\n        text: db.name,\n        value: db.name\n      };\n    }); //extract supported Database version from webInfo (staic) need to dynamic for multi-db-version\n\n    const dbVersionOption = detail.database[0].version.map(v => {\n      return {\n        text: v,\n        value: v\n      };\n    });\n    let dbComponent;\n\n    if (this.state.databaseChecked) {\n      console.log(\"checked work :\", this.state.databaseChecked);\n      dbComponent = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        fluid: true,\n        control: Select,\n        placeholder: \"Database\",\n        options: databaseOption,\n        label: \"database\",\n        width: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        fluid: true,\n        control: Select,\n        placeholder: \"Version\",\n        options: dbVersionOption,\n        label: \"version\",\n        width: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        control: \"input\",\n        label: \"database backup \",\n        type: \"file\",\n        accept: \".sql\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    } else {\n      dbComponent = null;\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      fluid: true,\n      control: Select,\n      options: languageOption,\n      label: \"language\",\n      placeholder: \"Language\",\n      onChange: this.languageOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      fluid: true,\n      control: Select,\n      options: versionOption,\n      label: \"version\",\n      placeholder: \"Version\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \" Project Files\"), React.createElement(\"input\", {\n      directory: \"\",\n      webkitdirectory: \"\",\n      type: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))), React.createElement(Form.Field, {\n      control: Checkbox,\n      label: \"check to upload database\",\n      onChange: this.dbOnCheck,\n      defaultChecked: this.state.databaseChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), dbComponent);\n  }\n\n}\n\nexport default WebsiteUploadForm;","map":{"version":3,"sources":["/home/htunlin/react/runnableprojecthub/src/component/WebsiteUploadForm.jsx"],"names":["React","Component","Checkbox","Form","Select","WebsiteUploadForm","constructor","props","languageOnChange","event","data","value","setState","selectedLanguage","languageVersionOnChange","dbOnCheck","e","checked","databaseChecked","console","log","dbOnChange","dbVersionOnChange","state","render","detail","projectDetail","webDetail","projects","filter","project","projectType","version","language","name","versionOption","length","map","v","text","languageOption","databaseOption","database","db","dbVersionOption","dbComponent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Checkbox, Form, Select } from \"semantic-ui-react\";\n\nclass WebsiteUploadForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLanguage: null,\n      databaseChecked: false\n    };\n  }\n\n  languageOnChange = (event, data) => {\n    this.props.languageOnChange(data.value);\n    this.setState({ selectedLanguage: data.value });\n  };\n\n  languageVersionOnChange = (event, data) => {\n    this.props.languageVersionOnChange(data.value);\n  };\n\n  dbOnCheck = (e, data) => {\n    this.props.dbOnCheck(data.checked);\n    this.setState({ databaseChecked: data.checked });\n    console.log(\"database :\", data.checked);\n  };\n\n  dbOnChange = (e, data) => {\n    this.props.dbOnChange(data.value);\n  };\n\n  dbVersionOnChange = (e, data) => {\n    this.props.dbVersionOnChange(data.value);\n  };\n\n  render() {\n    const detail = this.props.projectDetail;\n\n    //extract website information\n    const webDetail = detail.projects.filter(project => {\n      return project.projectType === \"Website\";\n    });\n    //extract supported language version from webInfo\n    const version = webDetail[0].language.filter(language => {\n      return language.name === this.state.selectedLanguage;\n    });\n    let versionOption = null;\n    if (version.length > 0) {\n      versionOption = version[0].version.map(v => {\n        return { text: v, value: v };\n      });\n    }\n\n    //extract supported Language from webInfo (\n    const languageOption = webDetail[0].language.map(language => {\n      return { text: language.name, value: language.name };\n    });\n\n    //extract supported Database from webInfo (staic) need to dynamic for multi-db\n    const databaseOption = detail.database.map(db => {\n      return { text: db.name, value: db.name };\n    });\n\n    //extract supported Database version from webInfo (staic) need to dynamic for multi-db-version\n    const dbVersionOption = detail.database[0].version.map(v => {\n      return { text: v, value: v };\n    });\n\n    let dbComponent;\n    if (this.state.databaseChecked) {\n      console.log(\"checked work :\", this.state.databaseChecked);\n      dbComponent = (\n        <React.Fragment>\n          <Form.Group>\n            <Form.Field\n              fluid\n              control={Select}\n              placeholder=\"Database\"\n              options={databaseOption}\n              label=\"database\"\n              width={4}\n            />\n            <Form.Field\n              fluid\n              control={Select}\n              placeholder=\"Version\"\n              options={dbVersionOption}\n              label=\"version\"\n              width={4}\n            />\n\n            <Form.Field\n              control=\"input\"\n              label=\"database backup \"\n              type=\"file\"\n              accept=\".sql\"\n            />\n          </Form.Group>\n        </React.Fragment>\n      );\n    } else {\n      dbComponent = null;\n    }\n\n    return (\n      <React.Fragment>\n        <Form.Group widths=\"equal\">\n          <Form.Field\n            fluid\n            control={Select}\n            options={languageOption}\n            label=\"language\"\n            placeholder=\"Language\"\n            onChange={this.languageOnChange}\n          />\n          <Form.Field\n            fluid\n            control={Select}\n            options={versionOption}\n            label=\"version\"\n            placeholder=\"Version\"\n          />\n          <Form.Field>\n            <label> Project Files</label>\n            <input directory=\"\" webkitdirectory=\"\" type=\"file\" />\n          </Form.Field>\n        </Form.Group>\n        <Form.Field\n          control={Checkbox}\n          label=\"check to upload database\"\n          onChange={this.dbOnCheck}\n          defaultChecked={this.state.databaseChecked}\n        />\n\n        {dbComponent}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WebsiteUploadForm;\n"]},"metadata":{},"sourceType":"module"}