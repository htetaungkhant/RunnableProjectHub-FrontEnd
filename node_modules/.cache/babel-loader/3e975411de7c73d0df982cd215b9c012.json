{"ast":null,"code":"var _jsxFileName = \"/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx\";\nimport React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport { TextArea, Checkbox, Button, Form, Select, Input } from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deviceOnChange = value => {\n      this.setState({\n        androidDevice: value\n      });\n    };\n\n    this.androidVersionOnChange = value => {\n      this.setState({\n        androidVersion: value\n      });\n    };\n\n    this.apiVersionOnChange = value => {\n      this.setState({\n        apiVersion: value\n      });\n    };\n\n    this.projectTypeOnChange = (event, data) => {\n      this.setState({\n        selectProjectType: data.value\n      });\n      console.log(data.value);\n    };\n\n    this.projectNameOnChange = (event, data) => {\n      this.setState({\n        selectProjectName: event.target.value\n      });\n      console.log(this.state.selectProjectName);\n    };\n\n    this.languageOnChange = value => {\n      this.setState({\n        selectLanguage: value\n      });\n    };\n\n    this.languageVersionOnChange = value => {\n      this.setState({\n        selectLanguageVersion: value\n      });\n    };\n\n    this.projectFilesOnChange = value => {\n      this.setState({\n        projectFiles: value\n      });\n    };\n\n    this.dbOnCheck = value => {\n      this.setState({\n        dbOnCheck: value\n      });\n    };\n\n    this.dbOnChanage = value => {\n      this.setState({\n        dbLanguage: value\n      });\n    };\n\n    this.dbVersionOnChange = value => {\n      this.setState({\n        dbVersion: value\n      });\n    };\n\n    this.dbBackUpOnChange = value => {\n      this.setState({\n        dbBackUpFile: value\n      });\n    };\n\n    this.descriptionOnChange = (e, data) => {\n      this.setState({\n        description: e.target.value\n      });\n    };\n\n    this.downloadPermissionOnChange = (e, data) => {\n      this.setState({\n        downloadPermission: true\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      console.log(\"On Submit worked !\");\n      console.log(this.state);\n      console.log(e);\n    };\n\n    this.reset = () => {\n      this.setState({\n        selectLanguage: null,\n        selectLanguageVersion: null,\n        projectFiles: null,\n        dbOnCheck: false,\n        dbLanguage: null,\n        dbVersion: null,\n        dbBackUpFile: null,\n        description: null,\n        downloadPremission: false,\n        androidDevice: null,\n        apiVersion: null,\n        androidVersion: null\n      });\n    };\n\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      selectProjectType: \"\",\n      selecteProjectName: null,\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPremission: false,\n      androidDevice: null,\n      apiVersion: null,\n      androidVersion: null\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/supportLanguage\").then(response => {\n      // handle success\n      const pj = response.data;\n      this.setState({\n        loading: false,\n        projects: pj,\n        projectTypes: pj.projects.map(project => {\n          return {\n            text: project.projectType,\n            value: project.projectType\n          };\n        }),\n        selectProjectType: \"Website\"\n      });\n      console.log(\"data fetched\", this.state.projectType);\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    });\n  }\n\n  render() {\n    const options = [{\n      text: \"Website\",\n      value: \"website\"\n    }, {\n      text: \"Window Application\",\n      value: \"window application\"\n    }, {\n      text: \"Android Application\",\n      value: \"android application\"\n    }];\n    let uploadform;\n\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = React.createElement(WebsiteUploadForm, {\n          projectDetail: this.state.projects,\n          languageOnChange: this.languageOnChange,\n          languageVersionOnChange: this.languageVersionOnChange,\n          projectFilesOnChange: this.projectFilesOnChange,\n          dbOnCheck: this.dbOnCheck,\n          dbOnChange: this.dbOnChanage,\n          dbVersionOnChange: this.dbVersionOnChange,\n          dbBackUpOnChange: this.dbBackUpOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        });\n        break;\n\n      case \"Window Application\":\n        uploadform = React.createElement(WindowUploadForm, {\n          projectDetail: this.state.projects,\n          languageOnChange: this.languageOnChange,\n          languageVersionOnChange: this.languageVersionOnChange,\n          projectFilesOnChange: this.projectFilesOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        });\n        break;\n\n      case \"Android Application\":\n        uploadform = React.createElement(AndroidUploadForm, {\n          projectDetail: this.state.projects,\n          deviceOnChange: this.deviceOnChange,\n          apiVersionOnChange: this.apiVersionOnChange,\n          androidVersionOnChange: this.androidVersionOnChange,\n          projectFilesOnChange: this.projectFilesOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        });\n        break;\n    }\n\n    return React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      fluid: true,\n      control: Select,\n      label: \"Project Type\",\n      options: this.state.projectTypes,\n      placeholder: \"Project Type\",\n      onChange: this.projectTypeOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      inline: true,\n      fluid: true,\n      control: Input,\n      label: \"Project Name\",\n      placeholder: \"Name\",\n      onChange: this.projectNameOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), uploadform, React.createElement(Form.Field, {\n      control: TextArea,\n      label: \"About\",\n      placeholder: \"Tell something about your project ...\",\n      onChange: this.descriptionOnChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      control: Checkbox,\n      label: \"allow download\",\n      onChange: this.downloadPermissionOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx"],"names":["React","Component","WebsiteUploadForm","WindowUploadForm","AndroidUploadForm","axios","TextArea","Checkbox","Button","Form","Select","Input","Upload","constructor","props","deviceOnChange","value","setState","androidDevice","androidVersionOnChange","androidVersion","apiVersionOnChange","apiVersion","projectTypeOnChange","event","data","selectProjectType","console","log","projectNameOnChange","selectProjectName","target","state","languageOnChange","selectLanguage","languageVersionOnChange","selectLanguageVersion","projectFilesOnChange","projectFiles","dbOnCheck","dbOnChanage","dbLanguage","dbVersionOnChange","dbVersion","dbBackUpOnChange","dbBackUpFile","descriptionOnChange","e","description","downloadPermissionOnChange","downloadPermission","onSubmit","preventDefault","reset","downloadPremission","loading","projects","projectTypes","selecteProjectName","componentDidMount","get","then","response","pj","map","project","text","projectType","catch","error","render","options","uploadform"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport {\n  TextArea,\n  Checkbox,\n  Button,\n  Form,\n  Select,\n  Input\n} from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      selectProjectType: \"\",\n      selecteProjectName: null,\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPremission: false,\n      androidDevice: null,\n      apiVersion: null,\n      androidVersion: null\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:8080/supportLanguage\")\n      .then(response => {\n        // handle success\n        const pj = response.data;\n        this.setState({\n          loading: false,\n          projects: pj,\n          projectTypes: pj.projects.map(project => {\n            return { text: project.projectType, value: project.projectType };\n          }),\n          selectProjectType: \"Website\"\n        });\n        console.log(\"data fetched\", this.state.projectType);\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      });\n  }\n\n  deviceOnChange = value => {\n    this.setState({ androidDevice: value });\n  };\n\n  androidVersionOnChange = value => {\n    this.setState({ androidVersion: value });\n  };\n\n  apiVersionOnChange = value => {\n    this.setState({ apiVersion: value });\n  };\n\n  projectTypeOnChange = (event, data) => {\n    this.setState({ selectProjectType: data.value });\n    console.log(data.value);\n  };\n\n  projectNameOnChange = (event, data) => {\n    this.setState({ selectProjectName: event.target.value });\n    console.log(this.state.selectProjectName);\n  };\n\n  languageOnChange = value => {\n    this.setState({ selectLanguage: value });\n  };\n\n  languageVersionOnChange = value => {\n    this.setState({ selectLanguageVersion: value });\n  };\n\n  projectFilesOnChange = value => {\n    this.setState({ projectFiles: value });\n  };\n\n  dbOnCheck = value => {\n    this.setState({ dbOnCheck: value });\n  };\n\n  dbOnChanage = value => {\n    this.setState({ dbLanguage: value });\n  };\n\n  dbVersionOnChange = value => {\n    this.setState({ dbVersion: value });\n  };\n\n  dbBackUpOnChange = value => {\n    this.setState({ dbBackUpFile: value });\n  };\n\n  descriptionOnChange = (e, data) => {\n    this.setState({ description: e.target.value });\n  };\n\n  downloadPermissionOnChange = (e, data) => {\n    this.setState({ downloadPermission: true });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(\"On Submit worked !\");\n    console.log(this.state);\n    console.log(e);\n  };\n\n  reset = () => {\n    this.setState({\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPremission: false,\n      androidDevice: null,\n      apiVersion: null,\n      androidVersion: null\n    });\n  };\n\n  render() {\n    const options = [\n      { text: \"Website\", value: \"website\" },\n      { text: \"Window Application\", value: \"window application\" },\n      { text: \"Android Application\", value: \"android application\" }\n    ];\n    let uploadform;\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = (\n          <WebsiteUploadForm\n            projectDetail={this.state.projects}\n            languageOnChange={this.languageOnChange}\n            languageVersionOnChange={this.languageVersionOnChange}\n            projectFilesOnChange={this.projectFilesOnChange}\n            dbOnCheck={this.dbOnCheck}\n            dbOnChange={this.dbOnChanage}\n            dbVersionOnChange={this.dbVersionOnChange}\n            dbBackUpOnChange={this.dbBackUpOnChange}\n          />\n        );\n        break;\n      case \"Window Application\":\n        uploadform = (\n          <WindowUploadForm\n            projectDetail={this.state.projects}\n            languageOnChange={this.languageOnChange}\n            languageVersionOnChange={this.languageVersionOnChange}\n            projectFilesOnChange={this.projectFilesOnChange}\n          />\n        );\n        break;\n      case \"Android Application\":\n        uploadform = (\n          <AndroidUploadForm\n            projectDetail={this.state.projects}\n            deviceOnChange={this.deviceOnChange}\n            apiVersionOnChange={this.apiVersionOnChange}\n            androidVersionOnChange={this.androidVersionOnChange}\n            projectFilesOnChange={this.projectFilesOnChange}\n          />\n        );\n        break;\n    }\n\n    return (\n      <Form onSubmit={this.onSubmit}>\n        <Form.Field\n          fluid\n          control={Select}\n          label=\"Project Type\"\n          options={this.state.projectTypes}\n          placeholder=\"Project Type\"\n          onChange={this.projectTypeOnChange}\n        />\n        <Form.Field\n          inline\n          fluid\n          control={Input}\n          label=\"Project Name\"\n          placeholder=\"Name\"\n          onChange={this.projectNameOnChange}\n        />\n        {uploadform}\n        <Form.Field\n          control={TextArea}\n          label=\"About\"\n          placeholder=\"Tell something about your project ...\"\n          onChange={this.descriptionOnChange}\n          required\n        />\n        <Form.Field\n          control={Checkbox}\n          label=\"allow download\"\n          onChange={this.downloadPermissionOnChange}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}