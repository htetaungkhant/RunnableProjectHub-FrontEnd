{"ast":null,"code":"var _jsxFileName = \"/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx\";\nimport React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport { Header, Segment, Message, TextArea, Checkbox, Button, Form, Select, Input } from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.postForm = () => {\n      switch (this.state.selectProjectType) {\n        case \"Website\":\n          axios.post(\"http://localhost:8080/upload\", {\n            userName: this.state.userName,\n            projectType: this.state.selectProjectType,\n            projectName: this.state.selectProjectName,\n            language: this.state.selectLanguage,\n            languageVersion: this.state.selectLanguageVersion,\n            projectFiles: this.state.projectFiles,\n            isDbUsed: this.state.dbOnCheck,\n            dbName: this.state.dbLanguage,\n            dbVersion: this.state.dbVersion,\n            dbBackupName: this.state.dbName,\n            dbBackupFile: this.state.dbBackUpFile,\n            description: this.state.description,\n            downloadPermission: this.state.downloadPermission\n          }).then(function (response) {\n            console.log(response);\n          }).catch(function (error) {\n            console.log(error);\n          });\n          break;\n\n        case \"Window Application\":\n          axios.post(\"http://localhost:8080/upload\", {\n            userName: this.state.userName,\n            projectType: this.state.selectProjectType,\n            projectName: this.state.selectProjectName,\n            language: this.state.selectLanguage,\n            languageVersion: this.state.selectLanguageVersion,\n            projectFiles: this.state.projectFiles,\n            isDbUsed: this.state.dbOnCheck,\n            dbName: this.state.dbLanguage,\n            dbVersion: this.state.dbVersion,\n            dbBackupName: this.state.dbName,\n            dbBackupFile: this.state.dbBackUpFile,\n            description: this.state.description,\n            downloadPermission: this.state.downloadPermission\n          }).then(function (response) {\n            console.log(response);\n          }).catch(function (error) {\n            console.log(error);\n          });\n          break;\n\n        case \"Android Application\":\n          axios.post(\"http://localhost:8080/upload\", {\n            userName: this.state.userName,\n            projectType: this.state.selectProjectType,\n            projectName: this.state.selectProjectName,\n            device: this.state.androidDevice,\n            apiVersion: this.state.apiVersion,\n            androidVersion: this.state.androidVersion,\n            projectFiles: this.state.projectFiles,\n            description: this.state.description,\n            downloadPermission: this.state.downloadPermission\n          }).then(function (response) {\n            console.log(response);\n          }).catch(function (error) {\n            console.log(error);\n          });\n      }\n    };\n\n    this.deviceOnChange = value => {\n      this.setState({\n        androidDevice: value\n      });\n    };\n\n    this.androidVersionOnChange = value => {\n      this.setState({\n        androidVersion: value\n      });\n    };\n\n    this.apiVersionOnChange = value => {\n      this.setState({\n        apiVersion: value\n      });\n    };\n\n    this.projectTypeOnChange = (event, data) => {\n      this.setState({\n        selectProjectType: data.value\n      });\n      this.reset();\n      console.log(data.value);\n    };\n\n    this.projectNameOnChange = (event, data) => {\n      this.setState({\n        selectProjectName: event.target.value\n      });\n      console.log(this.state.selectProjectName);\n    };\n\n    this.languageOnChange = value => {\n      this.setState({\n        selectLanguage: value\n      });\n    };\n\n    this.languageVersionOnChange = value => {\n      this.setState({\n        selectLanguageVersion: value\n      });\n    };\n\n    this.projectFilesOnChange = value => {\n      this.setState({\n        projectFiles: value\n      });\n    };\n\n    this.dbOnCheck = value => {\n      this.setState({\n        dbOnCheck: value\n      });\n    };\n\n    this.dbOnChanage = value => {\n      this.setState({\n        dbLanguage: value\n      });\n    };\n\n    this.dbVersionOnChange = value => {\n      this.setState({\n        dbVersion: value\n      });\n    };\n\n    this.dbNameOnChange = value => {\n      this.setState({\n        dbName: value\n      });\n    };\n\n    this.dbBackUpOnChange = value => {\n      this.setState({\n        dbBackUpFile: value\n      });\n    };\n\n    this.descriptionOnChange = (e, data) => {\n      this.setState({\n        description: e.target.value\n      });\n    };\n\n    this.downloadPermissionOnChange = (e, data) => {\n      this.setState({\n        downloadPermission: data.checked\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      this.validateForm();\n      console.log(\"On Submit worked !\");\n      console.log(this.state);\n    };\n\n    this.validateForm = () => {\n      if (this.state.selectProjectType == \"Website\" || this.state.selectProjectType == \"Window Application\") {\n        if (this.state.name == null) this.setState({\n          errorStatus: true\n        });else if (this.state.selectLanguage == null) this.setState({\n          errorStatus: true\n        });else if (this.state.selectLanguageVersion == null) this.setState({\n          errorStatus: true\n        });else if (this.state.projectFiles == null) this.setState({\n          errorStatus: true\n        });else if (this.state.isDbUsed) {\n          if (this.state.dbName == null) this.setState({\n            errorStatus: true\n          });else if (this.state.dbLanguage == null) this.setState({\n            errorStatus: true\n          });else if (this.state.dbVersion == null) this.setState({\n            errorStatus: true\n          });else if (this.state.dbBackUpFile == null) this.setState({\n            errorStatus: true\n          });\n        }\n      } else if (this.state.selectProjectType == \"Android Application\") {\n        if (this.state.device == null) this.setState({\n          errorStatus: true\n        });else if (this.state.apiVersion == null) this.setState({\n          errorStatus: true\n        });else if (this.state.androidVersion == null) this.setState({\n          errorStatus: true\n        });\n      } else {\n        //request post api\n        this.postForm();\n      }\n\n      if (this.state.errorStatus) {\n        setTimeout(() => {\n          this.setState({\n            errorStatus: false\n          });\n        }, 5000);\n      }\n    };\n\n    this.reset = () => {\n      this.setState({\n        selectLanguage: null,\n        selectLanguageVersion: null,\n        projectFiles: null,\n        dbOnCheck: false,\n        dbLanguage: null,\n        dbVersion: null,\n        dbBackUpFile: null,\n        description: null,\n        downloadPermission: false,\n        androidDevice: null,\n        apiVersion: null,\n        androidVersion: null\n      });\n    };\n\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      userName: \"koko\",\n      selectProjectType: \"Website\",\n      selectProjectName: null,\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbName: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPermission: false,\n      androidDevice: null,\n      apiVersion: null,\n      androidVersion: null,\n      errorStatus: false\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/supportLanguage\").then(response => {\n      // handle success\n      const pj = response.data;\n      this.setState({\n        loading: false,\n        projects: pj,\n        projectTypes: pj.projects.map(project => {\n          return {\n            text: project.projectType,\n            value: project.projectType\n          };\n        }),\n        selectProjectType: \"Website\"\n      });\n      console.log(\"data fetched\", this.state.projectType);\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    });\n  }\n\n  render() {\n    //error message\n    let showErrorMessage = null;\n\n    if (this.state.errorStatus) {\n      showErrorMessage = React.createElement(Message, {\n        error: true,\n        header: \"Failed to Submit ! Incomplete Form !\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      });\n    } else {\n      showErrorMessage = null;\n    }\n\n    let uploadform;\n\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = React.createElement(WebsiteUploadForm, {\n          projectDetail: this.state.projects,\n          languageOnChange: this.languageOnChange,\n          languageVersionOnChange: this.languageVersionOnChange,\n          projectFilesOnChange: this.projectFilesOnChange,\n          dbOnCheck: this.dbOnCheck,\n          dbOnChange: this.dbOnChanage,\n          dbNameOnChange: this.dbNameOnChange,\n          dbVersionOnChange: this.dbVersionOnChange,\n          dbBackUpOnChange: this.dbBackUpOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279\n          },\n          __self: this\n        });\n        break;\n\n      case \"Window Application\":\n        uploadform = React.createElement(WindowUploadForm, {\n          projectDetail: this.state.projects,\n          languageOnChange: this.languageOnChange,\n          languageVersionOnChange: this.languageVersionOnChange,\n          projectFilesOnChange: this.projectFilesOnChange,\n          dbOnCheck: this.dbOnCheck,\n          dbOnChange: this.dbOnChanage,\n          dbNameOnChange: this.dbNameOnChange,\n          dbVersionOnChange: this.dbVersionOnChange,\n          dbBackUpOnChange: this.dbBackUpOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294\n          },\n          __self: this\n        });\n        break;\n\n      case \"Android Application\":\n        uploadform = React.createElement(AndroidUploadForm, {\n          projectDetail: this.state.projects,\n          deviceOnChange: this.deviceOnChange,\n          apiVersionOnChange: this.apiVersionOnChange,\n          androidVersionOnChange: this.androidVersionOnChange,\n          projectFilesOnChange: this.projectFilesOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        });\n        break;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"uploadForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Upload your project\"), showErrorMessage, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      fluid: true,\n      control: Select,\n      label: \"Project Type\",\n      options: this.state.projectTypes,\n      placeholder: \"Project Type\",\n      onChange: this.projectTypeOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      inline: true,\n      fluid: true,\n      control: Input,\n      label: \"Project Name\",\n      placeholder: \"Name\",\n      onChange: this.projectNameOnChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), uploadform, React.createElement(Form.Field, {\n      control: TextArea,\n      label: \"Description\",\n      placeholder: \"Tell something about your project ...\",\n      onChange: this.descriptionOnChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      control: Checkbox,\n      label: \"Allow download\",\n      onChange: this.downloadPermissionOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/home/htunlin/react/runnableprojecthub/src/component/Upload.jsx"],"names":["React","Component","WebsiteUploadForm","WindowUploadForm","AndroidUploadForm","axios","Header","Segment","Message","TextArea","Checkbox","Button","Form","Select","Input","Upload","constructor","props","postForm","state","selectProjectType","post","userName","projectType","projectName","selectProjectName","language","selectLanguage","languageVersion","selectLanguageVersion","projectFiles","isDbUsed","dbOnCheck","dbName","dbLanguage","dbVersion","dbBackupName","dbBackupFile","dbBackUpFile","description","downloadPermission","then","response","console","log","catch","error","device","androidDevice","apiVersion","androidVersion","deviceOnChange","value","setState","androidVersionOnChange","apiVersionOnChange","projectTypeOnChange","event","data","reset","projectNameOnChange","target","languageOnChange","languageVersionOnChange","projectFilesOnChange","dbOnChanage","dbVersionOnChange","dbNameOnChange","dbBackUpOnChange","descriptionOnChange","e","downloadPermissionOnChange","checked","onSubmit","preventDefault","validateForm","name","errorStatus","setTimeout","loading","projects","projectTypes","componentDidMount","get","pj","map","project","text","render","showErrorMessage","uploadform"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport WebsiteUploadForm from \"./WebsiteUploadForm\";\nimport WindowUploadForm from \"./WindowUploadForm\";\nimport AndroidUploadForm from \"./AndroidUploadForm\";\nimport axios from \"axios\";\nimport {\n  Header,\n  Segment,\n  Message,\n  TextArea,\n  Checkbox,\n  Button,\n  Form,\n  Select,\n  Input\n} from \"semantic-ui-react\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      projects: null,\n      projectTypes: null,\n      userName: \"koko\",\n      selectProjectType: \"Website\",\n      selectProjectName: null,\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbName: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPermission: false,\n      androidDevice: null,\n      apiVersion: null,\n      androidVersion: null,\n      errorStatus: false\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:8080/supportLanguage\")\n      .then(response => {\n        // handle success\n        const pj = response.data;\n        this.setState({\n          loading: false,\n          projects: pj,\n          projectTypes: pj.projects.map(project => {\n            return { text: project.projectType, value: project.projectType };\n          }),\n          selectProjectType: \"Website\"\n        });\n        console.log(\"data fetched\", this.state.projectType);\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      });\n  }\n\n  postForm = () => {\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        axios\n          .post(\"http://localhost:8080/upload\", {\n            userName: this.state.userName,\n            projectType: this.state.selectProjectType,\n            projectName: this.state.selectProjectName,\n            language: this.state.selectLanguage,\n            languageVersion: this.state.selectLanguageVersion,\n            projectFiles: this.state.projectFiles,\n            isDbUsed: this.state.dbOnCheck,\n            dbName: this.state.dbLanguage,\n            dbVersion: this.state.dbVersion,\n            dbBackupName: this.state.dbName,\n            dbBackupFile: this.state.dbBackUpFile,\n            description: this.state.description,\n            downloadPermission: this.state.downloadPermission\n          })\n          .then(function(response) {\n            console.log(response);\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n        break;\n      case \"Window Application\":\n        axios\n          .post(\"http://localhost:8080/upload\", {\n            userName: this.state.userName,\n            projectType: this.state.selectProjectType,\n            projectName: this.state.selectProjectName,\n            language: this.state.selectLanguage,\n            languageVersion: this.state.selectLanguageVersion,\n            projectFiles: this.state.projectFiles,\n            isDbUsed: this.state.dbOnCheck,\n            dbName: this.state.dbLanguage,\n            dbVersion: this.state.dbVersion,\n            dbBackupName: this.state.dbName,\n            dbBackupFile: this.state.dbBackUpFile,\n            description: this.state.description,\n            downloadPermission: this.state.downloadPermission\n          })\n          .then(function(response) {\n            console.log(response);\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n        break;\n      case \"Android Application\":\n        axios\n          .post(\"http://localhost:8080/upload\", {\n            userName: this.state.userName,\n            projectType: this.state.selectProjectType,\n            projectName: this.state.selectProjectName,\n            device: this.state.androidDevice,\n            apiVersion: this.state.apiVersion,\n            androidVersion: this.state.androidVersion,\n            projectFiles: this.state.projectFiles,\n            description: this.state.description,\n            downloadPermission: this.state.downloadPermission\n          })\n          .then(function(response) {\n            console.log(response);\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n    }\n  };\n\n  deviceOnChange = value => {\n    this.setState({ androidDevice: value });\n  };\n\n  androidVersionOnChange = value => {\n    this.setState({ androidVersion: value });\n  };\n\n  apiVersionOnChange = value => {\n    this.setState({ apiVersion: value });\n  };\n\n  projectTypeOnChange = (event, data) => {\n    this.setState({ selectProjectType: data.value });\n    this.reset();\n    console.log(data.value);\n  };\n\n  projectNameOnChange = (event, data) => {\n    this.setState({ selectProjectName: event.target.value });\n    console.log(this.state.selectProjectName);\n  };\n\n  languageOnChange = value => {\n    this.setState({ selectLanguage: value });\n  };\n\n  languageVersionOnChange = value => {\n    this.setState({ selectLanguageVersion: value });\n  };\n\n  projectFilesOnChange = value => {\n    this.setState({ projectFiles: value });\n  };\n\n  dbOnCheck = value => {\n    this.setState({ dbOnCheck: value });\n  };\n\n  dbOnChanage = value => {\n    this.setState({ dbLanguage: value });\n  };\n\n  dbVersionOnChange = value => {\n    this.setState({ dbVersion: value });\n  };\n\n  dbNameOnChange = value => {\n    this.setState({ dbName: value });\n  };\n\n  dbBackUpOnChange = value => {\n    this.setState({ dbBackUpFile: value });\n  };\n\n  descriptionOnChange = (e, data) => {\n    this.setState({ description: e.target.value });\n  };\n\n  downloadPermissionOnChange = (e, data) => {\n    this.setState({ downloadPermission: data.checked });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.validateForm();\n    console.log(\"On Submit worked !\");\n    console.log(this.state);\n  };\n\n  validateForm = () => {\n    if (\n      this.state.selectProjectType == \"Website\" ||\n      this.state.selectProjectType == \"Window Application\"\n    ) {\n      if (this.state.name == null) this.setState({ errorStatus: true });\n      else if (this.state.selectLanguage == null)\n        this.setState({ errorStatus: true });\n      else if (this.state.selectLanguageVersion == null)\n        this.setState({ errorStatus: true });\n      else if (this.state.projectFiles == null)\n        this.setState({ errorStatus: true });\n      else if (this.state.isDbUsed) {\n        if (this.state.dbName == null) this.setState({ errorStatus: true });\n        else if (this.state.dbLanguage == null)\n          this.setState({ errorStatus: true });\n        else if (this.state.dbVersion == null)\n          this.setState({ errorStatus: true });\n        else if (this.state.dbBackUpFile == null)\n          this.setState({ errorStatus: true });\n      }\n    } else if (this.state.selectProjectType == \"Android Application\") {\n      if (this.state.device == null) this.setState({ errorStatus: true });\n      else if (this.state.apiVersion == null)\n        this.setState({ errorStatus: true });\n      else if (this.state.androidVersion == null)\n        this.setState({ errorStatus: true });\n    } else {\n      //request post api\n      this.postForm();\n    }\n    if (this.state.errorStatus) {\n      setTimeout(() => {\n        this.setState({ errorStatus: false });\n      }, 5000);\n    }\n  };\n\n  reset = () => {\n    this.setState({\n      selectLanguage: null,\n      selectLanguageVersion: null,\n      projectFiles: null,\n      dbOnCheck: false,\n      dbLanguage: null,\n      dbVersion: null,\n      dbBackUpFile: null,\n      description: null,\n      downloadPermission: false,\n      androidDevice: null,\n      apiVersion: null,\n      androidVersion: null\n    });\n  };\n\n  render() {\n    //error message\n    let showErrorMessage = null;\n    if (this.state.errorStatus) {\n      showErrorMessage = (\n        <Message error header=\"Failed to Submit ! Incomplete Form !\" />\n      );\n    } else {\n      showErrorMessage = null;\n    }\n\n    let uploadform;\n    switch (this.state.selectProjectType) {\n      case \"Website\":\n        uploadform = (\n          <WebsiteUploadForm\n            projectDetail={this.state.projects}\n            languageOnChange={this.languageOnChange}\n            languageVersionOnChange={this.languageVersionOnChange}\n            projectFilesOnChange={this.projectFilesOnChange}\n            dbOnCheck={this.dbOnCheck}\n            dbOnChange={this.dbOnChanage}\n            dbNameOnChange={this.dbNameOnChange}\n            dbVersionOnChange={this.dbVersionOnChange}\n            dbBackUpOnChange={this.dbBackUpOnChange}\n          />\n        );\n        break;\n      case \"Window Application\":\n        uploadform = (\n          <WindowUploadForm\n            projectDetail={this.state.projects}\n            languageOnChange={this.languageOnChange}\n            languageVersionOnChange={this.languageVersionOnChange}\n            projectFilesOnChange={this.projectFilesOnChange}\n            dbOnCheck={this.dbOnCheck}\n            dbOnChange={this.dbOnChanage}\n            dbNameOnChange={this.dbNameOnChange}\n            dbVersionOnChange={this.dbVersionOnChange}\n            dbBackUpOnChange={this.dbBackUpOnChange}\n          />\n        );\n        break;\n      case \"Android Application\":\n        uploadform = (\n          <AndroidUploadForm\n            projectDetail={this.state.projects}\n            deviceOnChange={this.deviceOnChange}\n            apiVersionOnChange={this.apiVersionOnChange}\n            androidVersionOnChange={this.androidVersionOnChange}\n            projectFilesOnChange={this.projectFilesOnChange}\n          />\n        );\n        break;\n    }\n\n    return (\n      <div className=\"uploadForm\">\n        <Header as=\"h2\" textAlign=\"center\">\n          Upload your project\n        </Header>\n\n        {showErrorMessage}\n        <Form onSubmit={this.onSubmit}>\n          <Form.Field\n            fluid\n            control={Select}\n            label=\"Project Type\"\n            options={this.state.projectTypes}\n            placeholder=\"Project Type\"\n            onChange={this.projectTypeOnChange}\n          />\n          <Form.Field\n            inline\n            fluid\n            control={Input}\n            label=\"Project Name\"\n            placeholder=\"Name\"\n            onChange={this.projectNameOnChange}\n            required\n          />\n          {uploadform}\n          <Form.Field\n            control={TextArea}\n            label=\"Description\"\n            placeholder=\"Tell something about your project ...\"\n            onChange={this.descriptionOnChange}\n            required\n          />\n          <Form.Field\n            control={Checkbox}\n            label=\"Allow download\"\n            onChange={this.downloadPermissionOnChange}\n          />\n\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}